"""
1. Проанализировать скорость и сложность одного любого алгоритма,
разработанных в рамках домашнего задания первых трех уроков.
Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.
"""

import timeit


# Алгоритм нахождения суммы n элементов, ряда чисел: 1 -0.5 0.25 -0.125 ...
# 1. Рекурсия

def row_sum_recursion(n, row2=0, i=0):
    if i <= n:
        row2 += (-1/2)**i
        i += 1
        return row_sum_recursion(n, row2, i,)
    else:
        return

# Алгоритм нахождения суммы n элементов, ряда чисел: 1 -0.5 0.25 -0.125 ...
# 1. Цикл


def row_sum_cycle(n):
    row, i = 0, 0
    while i <= n:
        row += (-1/2)**i
        i += 1
    return

# Зададим количество элементов ряда


n = 100
# Сравним время выполнения алгоритма с рекурсией и алгоритма с циклом,
# при помощи модуля timeit
# Количество выполнений оставим по умолчанию (number = 1000000)


print('RECURSION:', timeit.timeit('row_sum_recursion(n)', setup='from __main__ import row_sum_recursion, n'))
print('CYCLE:', timeit.timeit('row_sum_cycle(n)', setup='from __main__ import row_sum_cycle, n'))

# Результаты (при n = 100):
# RECURSION: 43.679992408
# CYCLE: 31.386889684000003
# Реализация алгоритма с циклом (без рекурсии) быстрее примерно на 1.39 секунды
# Вывод: целесообразнее использовать алгоритм с циклом.


